import os
import string
from collections import Counter

"""
Programa de Identifica√ß√£o de Autoria
A ideia nessa aula √© desenvolvermos um programa que tenta identificar o autor desconhecido de um texto misterioso.

Vamos usar IA para fazer essa predi√ß√£o.
N√£o vamos perder a oportunidade de usar IA em uma disciplina de Programa√ß√£o com Suporte de IA. üòÅ
12
Suponha que temos dois trechos de texto.

Trecho 1

I have not yet described to you the most singular part. About six years ago ‚Äî to be exact, upon the 4th of May 1882 ‚Äî an advertisement appeared in the Times asking for the address of Miss Mary Morstan and stating that it would be to her advantage to come forward. There was no name or address appended. I had at that time just entered the family of Mrs. Cecil Forrester in the capacity of governess. By her advice I published my address in the advertisement column. The same day there arrived through the post a small card-board box addressed to me, which I found to contain a very large and lustrous pearl. No word of writing was enclosed. Since then, every year upon the same date there has always appeared a similar box, containing a similar pearl, without any clue as to the sender. They have been pronounced by an expert to be of a rare variety and of considerable value. You can see for yourselves that they are very handsome.

13
Trecho 2

It was the Dover Road that lay on a Friday night late in November, before the first of the persons with whom this history has business. The Dover Road lay, as to him, beyond the Dover mail, as it lumbered up Shooter‚Äôs Hill. He walked up hill in the mire by the side of the mail, as the rest of the passengers did; not because they had the least relish for walking exercise, under the circumstances, but because the hill, and the harness, and the mud, and the mail, were all so heavy, that the horses had three times already come to a stop, besides once drawing the coach across the road, with the mutinous intent of taking it back to Blackheath. Reins and whip and coachman and guard, however, in combination, had read that article of war which forbade a purpose otherwise strongly in favour of the argument, that some brute animals are endued with Reason; and the team had capitulated and returned to their duty.

14
Suponha que algu√©m te pergunte se √© prov√°vel que esses dois trechos tenham sido escritos pelo mesmo autor.

Como voc√™ poderia responder a essa pergunta?
Apenas com base nos textos - n√£o vale jogar no Google üòú
Podemos assumir uma premissa razo√°vel de que autores diferentes t√™m estilo de escrita diferentes.

E que essas diferen√ßas aparecem em m√©tricas que podemos calcular a partir dos textos.
15
Como assim?

Podemos notar, por exemplo, que o primeiro trecho tem frases mais curtas.
E o segundo texto parece mais complexo se repararmos a quantidade de v√≠rgulas e ponto-e-v√≠rgulas.
Com base nessa avalia√ß√£o poder√≠amos concluir que os textos, provavelmente, foram escritos por autores diferentes.

O que √© verdade nesse caso.
16
O autor do primeiro texto √© Sir Arthur Conan Doyle.

Foto de Sir Arthur Conan Doyle. Imagem do filme Sherlock Holmes.

E o autor do segundo texto √© Charles Dickens.

Foto de Charles Dickens. Imagem de adapta√ß√µes de obras de Charles Dickens.

17
Nesse caso acertamos que s√£o autores diferentes, mas o exemplo foi escolhido a dedo ü§≠

Pode ser, por exemplo, que um mesmo autor escreva diferente em trechos ou livros diferentes.
Mas, como n√£o vamos fazer um programa perfeito, tudo bem.
18
Ideia Geral
Baseado no princ√≠pio desse exemplo, suponha que tenhamos:

um conjunto de textos de autores conhecidos.
e o texto de um autor desconhecido
Poderia ser uma obra nunca publicada, que foi encontrada por acaso com um colecionador, por exemplo.
Ou uma obra publicada com um pseud√¥nimo, que pare√ßa ter sido escrita por um autor conhecido.
Precisamos de uma forma que nos permita comparar o estilo de escrita dos autores conhecidos com o do autor desconhecido.

19
Ideia Geral
Nossa estrat√©gia ser√° construir uma ‚Äúimpress√£o digital‚Äù (ou ‚Äúassinatura‚Äù) do estilo de escrita de cada autor.

Com base em um livro que ele tenha escrito.
Essa impress√£o digital seria baseada em m√©tricas que conseguimos calcular a partir do texto.
Como o n√∫mero m√©dio de palavras por frase e a complexidade m√©dia das frases.
20
Ideia Geral
Usar√≠amos o mesmo processo para construir a impress√£o digital do texto de autor desconhecido.

E comparar√≠amos a impress√£o digital do autor desconhecido com a dos autores conhecidos.
Aquele que tiver a impress√£o digital mais pr√≥xima, seria o autor mais prov√°vel do texto desconhecido.
21
Limita√ß√µes
Claro que o texto de autor desconhecido pode ser de um autor completamente novo.

Ou pode ser que nossas m√©tricas n√£o capturem bem o estilo de escrita de cada autor.
Ou ainda que um mesmo autor escreva livros diferentes com estilos diferentes.
Portanto, nosso programa n√£o estar√° pronto para ser lan√ßado no mercado üôÉ

De todo modo, dada a dificuldade da tarefa, voc√™ ficar√° surpreso com o resultado que conseguiremos alcan√ßar.
22
A ideia nessa aula √© que voc√™ mesmo fa√ßa o design top-down do programa.

E use o Copilot para ajudar a implementar as fun√ß√µes que voc√™ definir.
O livro da disciplina vai construindo o design e, √† medida que avan√ßa, vai acrescentando mais detalhes sobre como o programa deve funcionar.

Como quais m√©tricas usar, por exemplo.
Mas como aqui √© voc√™ quem far√° o design, √© necess√°rio que voc√™ conhe√ßa esses detalhes antes de come√ßar a fazer o design.
23
Defini√ß√µes para o Programa de Identifica√ß√£o de Autoria
24
Textos dispon√≠veis
O projeto inicial disponibilizado tem uma pasta dados.

Dentro da pasta h√° uma pasta chamada autores_conhecidos com 5 arquivos de texto.
Cada arquivo √© um livro diferente, escrito por um autor diferente.
O t√≠tulo do arquivo √© o nome do autor.
H√° tamb√©m 4 arquivos de autores desconhecidos.
Cada arquivo √© um trecho de texto, que pode ter sido escrito por qualquer um dos autores conhecidos.
O nome do arquivo n√£o indica o autor.
25
M√©tricas
A ideia √© utilizar as seguintes m√©tricas para construir a impress√£o digital de cada autor:

tamanho m√©dio das palavras
n√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras
n√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras
n√∫mero m√©dio de palavras por frase
complexidade m√©dia das frases
A seguir vamos detalhar como calcular cada uma delas.

26
Tamanho m√©dio das palavras
A ideia aqui √© diferenciar autores que usam, em m√©dia, palavras mais curtas ou mais longas.

Calculamos o n√∫mero total de letras das palavras e o n√∫mero total de palavras do texto.
E dividimos o primeiro pelo segundo.
Exemplo: ‚ÄúA chuva ca√≠a. O guarda-chuva tinha ficado em casa.‚Äù

S√£o 40 letras e 9 palavras com um total.
Tamanho m√©dio das palavras: 40 / 9 = 4.44
Obs.: para simplificar estamos considerando que o h√≠fen conta como letra.
27
N√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras
A ideia dessa m√©trica √© identificar autores que costumam ser repetitivos ou n√£o.

Calculamos o n√∫mero de palavras diferentes que aparecem.
E dividimos pelo n√∫mero total de palavras do texto.
Ex.: Uma p√©rola! Uma p√©rola! Uma p√©rola brilhante! Rara. Que belo achado.

Total de palavras: 10
Palavras diferentes: 7 (uma, p√©rola, brilhante, rara, que, belo, achado)
Resultado da m√©trica: 7 / 10 = 0.7
28
N√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras
Pode ser que alguns autores usem muitas palavras apenas uma vez, enquanto outros tendem a repetir mais as palavras.

Vamos calcular o n√∫mero de palavras que aparecem exatamente uma vez no texto.
E dividir pelo n√∫mero total de palavras do texto.
Exemplo: Uma p√©rola! Uma p√©rola! Uma p√©rola brilhante! Rara. Que belo achado.

N√∫mero total de palavras: 10
Palavras usadas exatamente uma vez: 5 (brilhante, rara, que, belo, achado)
Resultado da m√©trica: 5 / 10 = 0.5
29
N√∫mero m√©dio de palavras por frase
A ideia dessa m√©trica √© identificar se o autor costuma escrever frases mais longas ou mais curtas.

Calculamos o n√∫mero total de palavras e o n√∫mero total de frases do texto.
E dividimos o primeiro pelo segundo.
Exemplo: ‚ÄúA chuva ca√≠a. O guarda-chuva tinha ficado em casa.‚Äù

N√∫mero total de palavras: 9
N√∫mero total de frases: 2
N√∫mero m√©dio de palavras por frase: 9 / 2 = 4.5
30
Complexidade m√©dia das frases
Comentamos no exemplo inicial que um trecho de texto tinha frases mais curtas e outro mais longas.

Uma maneira que temos de medir a complexidade √© verificar se as frases t√™m mais de uma ora√ß√£o.
Exemplo: ‚ÄúNo mesmo dia chegou uma carta endere√ßada a mim, que parecia conter algo importante. Mas n√£o tive coragem de abri-la.‚Äù

Veja que a primeira frase tem duas ora√ß√µes, separadas pela v√≠rgula.
J√° a segunda frase tem apenas uma ora√ß√£o.
31
Complexidade m√©dia das frases
Como seria muito complicado realmente tentar identificar ora√ß√µes, vamos usar uma aproxima√ß√£o simples:

Vamos considerar que toda v√≠rgula, ponto-e-v√≠rgula ou dois-pontos indicam a separa√ß√£o de ora√ß√µes de uma frase.
E vamos calcular o total de ora√ß√µes dividido pelo total de frases do texto.
No exemplo citado, o resultado da m√©trica seria: 3 / 2 = 1.5
32
A impress√£o digital de cada autor ser√° ent√£o dada pelo conjunto de m√©tricas calculada a partir de um livro que ele tenha escrito.

Ela ser√° uma lista de 5 n√∫meros, com os valores de cada m√©trica na ordem que definimos.
Exemplo: [4.44, 0.7, 0.5, 4.5, 1.5]
tamanho m√©dio das palavras
n√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras
n√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras
n√∫mero m√©dio de palavras por frase
complexidade m√©dia das frases
Em Aprendizado de M√°quina, n√≥s chamar√≠amos esse conjunto de vetor de caracter√≠sticas (features).

33
Identificando o autor desconhecido
Para identificar o autor desconhecido de um texto, faremos o seguinte:

Calcularemos a impress√£o digital de cada autor conhecido.
Calcularemos a impress√£o digital do texto de autor desconhecido.
E a compararemos com a impress√£o digital de cada autor conhecido.
O autor conhecido cuja impress√£o digital for mais pr√≥xima, ser√° o autor mais prov√°vel do texto desconhecido.
Mas como ser√° feita a compara√ß√£o entre as impress√µes digitais?

34
Identificando o autor desconhecido
Suponha que estamos comparando a impress√£o digital [4.44, 0.7, 0.5, 4.5, 1.5] com uma impress√£o digital de um autor desconhecido dada por [4.0, 0.5, 0.7, 4.0, 1.9].

Vamos calcular a diferen√ßa, em m√≥dulo, entre cada m√©trica.
O resultado seria [0.44, 0.2, 0.2, 0.5, 0.4].
E, em seguida, vamos calcular a soma ponderada dessas diferen√ßas.
Os pesos da soma seria: [11, 33, 50, 0.4, 4].
O resultado seria ent√£o (0.44*11 + 0.2*33 + 0.2*50 + 0.5*0.4 + 0.4*4) = 23.24.
35
Identificando o autor desconhecido
Mas de onde veio essa lista de pesos?

Os autores do livro aplicaram esse exerc√≠cio ao longo do tempo.
E, empiricamente, descobriram que esses pesos funcionam bem para esse problema.
Obs.: em uma aplica√ß√£o profissional de Aprendizado de M√°quina, esses pesos seriam aprendidos a partir de um conjunto de dados de treinamento.

36
Identificando o autor desconhecido
Voltando √† identifica√ß√£o do autor desconhecido:

Vimos que a compara√ß√£o entre duas impress√µes digitais resulta em um n√∫mero (score).
E quanto menor esse n√∫mero, menor a diferen√ßa entre as impress√µes digitais, certo?
Portanto, o autor conhecido cuja compara√ß√£o resulte no menor score ser√° o autor mais prov√°vel do texto desconhecido.
37
Dica para a fase de design
Uma das opera√ß√µes necess√°rias √© a contagem de palavras.

Para isso, podemos usar a fun√ß√£o split() da classe str.
Exemplo:
Usando fun√ß√£o split() no trecho ‚ÄúA chuva ca√≠a. O guarda-chuva tinha ficado em casa.‚Äù
Obter√≠amos as palavras: ["A", "chuva", "ca√≠a.", "O", "guarda-chuva", "tinha", "ficado", "em", "casa."]
Mas veja que as palavras ‚Äúca√≠a.‚Äù e ‚Äúca√≠a‚Äù seriam consideradas diferentes.
Precisamos ent√£o tratar isso, removendo as pontua√ß√µes das palavras.
Mas devemos tomar cuidado para n√£o remover o h√≠fen, que faz parte da palavra (como na palavra ‚Äúguarda-chuva‚Äù).
Bastaria remover as pontua√ß√µes apenas do in√≠cio e do fim das palavras.
"""


def leitura_de_textos(caminho_pasta):
    """
    Fun√ß√£o que recebe o caminho da pasta onde est√£o os arquivos de texto.

    L√™ todos os arquivos da pasta especificada e retorna um dicion√°rio:
    - chave: nome do arquivo (sem extens√£o)
    - valor: conte√∫do do arquivo
    """
    textos = {}

    if os.path.exists(caminho_pasta):
        for arquivo in os.listdir(caminho_pasta):
            caminho = os.path.join(caminho_pasta, arquivo)
            if os.path.isfile(caminho):
                with open(caminho, "r", encoding="utf-8") as f:
                    textos[os.path.splitext(arquivo)[0]] = f.read()

    return textos


def extracao_de_palavras(texto):
    """
    Recebe um texto em formato de string √∫nica e extrai todas as palavras,
    removendo pontua√ß√µes do in√≠cio e do fim.
    Retorna uma lista de palavras limpas.
    """
    pontuacoes = string.punctuation.replace("-", "")
    palavras = texto.split()
    palavras_limpa = [
        palavra.strip(pontuacoes) for palavra in palavras if palavra.strip(pontuacoes)
    ]
    return palavras_limpa


def contagem_de_letras(texto):
    """
    Deve realizar a contagem de letras de um determinado texto recebendo o texto em formato
    de uma string √∫nica para que assim seja poss√≠vel extrair quantas letras aquela string cont√©m
    Retorno: Retorna um n√∫mero inteiro com a quantidade de letras que aquele texto(string)
    cont√©m
    """
    # Remove pontua√ß√µes do in√≠cio e fim das palavras, mas mant√©m h√≠fen
    pontuacoes = string.punctuation.replace("-", "")
    palavras = texto.split()
    total_letras = 0
    for palavra in palavras:
        palavra_limpa = palavra.strip(pontuacoes)
        total_letras += len(palavra_limpa)
    return total_letras


def tamanho_medio_palavras(texto):
    """
    Recebe um texto em formato de string √∫nica e calcula o tamanho m√©dio das palavras.
    Retorna um float com a m√©dia do tamanho das palavras.
    """
    palavras = extracao_de_palavras(texto)
    if not palavras:
        return 0.0
    total_letras = contagem_de_letras(texto)
    return total_letras / len(palavras)


def contagem_de_frases(texto):
    """
    Contabiliza o n√∫mero de frases em um texto, recebendo o texto como par√¢metro
    e calculando quantas frases aquele texto possui.
    Retorno: Retorna um n√∫mero inteiro com a quantidade de frases que aquele texto possui.
    """
    delimitadores = [".", "!", "?"]
    frases = 0
    for caractere in texto:
        if caractere in delimitadores:
            frases += 1
    return frases if frases > 0 else 1


def contagem_de_oracoes(texto):
    """
    Recebe um texto e conta o n√∫mero de ora√ß√µes no texto (aproxima√ß√£o usando v√≠rgulas, ponto-e-v√≠rgula, dois-pontos).
    Retorna um inteiro com o n√∫mero de ora√ß√µes.
    """
    delimitadores = [",", ";", ":"]
    oracoes = 1  # Come√ßa com 1 para contar a primeira ora√ß√£o
    for caractere in texto:
        if caractere in delimitadores:
            oracoes += 1
    return oracoes


def contagem_palavras_diferentes(texto):
    """
    Chama a fun√ß√£o "extracao_de_palavras" para obter a lista de palavras do texto.
    Cria um conjunto (set) a partir da lista de palavras para eliminar duplicatas.
    Retorna o tamanho do conjunto, que representa o n√∫mero de palavras diferentes no texto.
    """
    palavras = extracao_de_palavras(texto)
    palavras_diferentes = set(palavras)
    return len(palavras_diferentes)


def med_palavras_por_frase(texto):
    """
    Dado um texto, calcula o n√∫mero m√©dio de palavras por frase.
    Retorna um float com a m√©dia.
    """
    total_palavras = len(extracao_de_palavras(texto))
    total_frases = contagem_de_frases(texto)
    if total_frases == 0:
        return 0.0
    return total_palavras / total_frases


def complexidade_media_frases(texto):
    """
    Dado um texto, calcula a complexidade m√©dia das frases,
    definida como o n√∫mero total de ora√ß√µes dividido pelo n√∫mero total de frases.
    Retorna um float com a complexidade m√©dia.
    """
    total_oracoes = contagem_de_oracoes(texto)
    total_frases = contagem_de_frases(texto)
    if total_frases == 0:
        return 0.0
    return total_oracoes / total_frases


def extracao_de_metricas(texto):
    """
    Extrai as m√©tricas do texto conforme especificado:
    1. Tamanho m√©dio das palavras
    2. N√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras
    3. N√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras
    4. N√∫mero m√©dio de palavras por frase
    5. Complexidade m√©dia das frases
    Retorna uma lista com as m√©tricas na ordem definida.
    """
    palavras = extracao_de_palavras(texto)
    total_palavras = len(palavras)
    if total_palavras == 0:
        return [0.0, 0.0, 0.0, 0.0, 0.0]

    # 1. Tamanho m√©dio das palavras
    tamanho_medio = tamanho_medio_palavras(texto)

    # 2. N√∫mero de palavras diferentes dividido pelo n√∫mero total de palavras
    palavras_diferentes = len(set(palavras))
    proporcao_diferentes = palavras_diferentes / total_palavras

    # 3. N√∫mero de palavras usadas exatamente uma vez dividido pelo n√∫mero total de palavras
    contagem = Counter(palavras)
    palavras_unicas = sum(1 for v in contagem.values() if v == 1)
    proporcao_unicas = palavras_unicas / total_palavras

    # 4. N√∫mero m√©dio de palavras por frase
    media_palavras_frase = med_palavras_por_frase(texto)

    # 5. Complexidade m√©dia das frases
    complexidade = complexidade_media_frases(texto)

    return [
        tamanho_medio,
        proporcao_diferentes,
        proporcao_unicas,
        media_palavras_frase,
        complexidade,
    ]


def gerar_array_proximidade(autores_conhecidos, autor_desconhecido):
    """
    Receber dois dicion√°rios contendo autores e textos conhecidos e desconhecidos.
    Cada dicion√°rio tem como chave o nome do autor e como valor o texto escrito por ele.
    Deve calcular a impress√£o digital atrav√©s de extrair m√©tricas de cada autor conhecido e do autor desconhecido.
    Deve retornar um dicion√°rio onde a chave √© o nome do texto e o um conjunto de dados de metricas
    para cada um dos textos.
    """
    metricas_conhecidos = {
        autor: extracao_de_metricas(texto)
        for autor, texto in autores_conhecidos.items()
    }
    metricas_desconhecidos = {
        autor: extracao_de_metricas(texto)
        for autor, texto in autor_desconhecido.items()
    }
    return {"conhecidos": metricas_conhecidos, "desconhecidos": metricas_desconhecidos}


def identificar_autor_desconhecido(metricas_conhecidos, metrica_desconhecido):
    """
    Recebe um dicion√°rio contendo autores e textos conhecidos e desconhecidos.
    Identifica o autor mais prov√°vel de um texto desconhecido.
    Para isso compara a impress√£o digital do autor desconhecido com a dos autores conhecidos.
    Retorna o nome do autor conhecido cuja impress√£o digital for mais pr√≥xima.
    """
    pesos = [11, 33, 50, 0.4, 4]
    menor_score = float("inf")
    autor_mais_provavel = None

    for autor, metrica_conhecido in metricas_conhecidos.items():
        score = sum(
            abs(metrica_conhecido[i] - metrica_desconhecido[i]) * pesos[i]
            for i in range(5)
        )
        if score < menor_score:
            menor_score = score
            autor_mais_provavel = autor

    return autor_mais_provavel


def main():
    autores_conhecidos = {}
    autores_desconhecidos = {}
    autores_desconhecidos = leitura_de_textos("../dados")
    autores_conhecidos = leitura_de_textos("../dados/autores_conhecidos")

    metricas = gerar_array_proximidade(autores_conhecidos, autores_desconhecidos)
    for autor_desconhecido, metrica_desconhecido in metricas["desconhecidos"].items():
        autor_mais_provavel = identificar_autor_desconhecido(
            metricas["conhecidos"], metrica_desconhecido
        )
        print(
            f"O autor mais prov√°vel de '{autor_desconhecido}' √©: {autor_mais_provavel}"
        )


if __name__ == "__main__":
    main()

